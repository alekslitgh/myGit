import * as readline from 'readline/promises';

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const mapSize: number = 10;
const playerBlock: string = "‚¨õ";
const shipBlock: string = "üö¢";
const fogOfWarBlock: string = "‚úº ";
const occupiedBlock:string = " +";
const damagedBlock: string = "üí•";
const deadShipBlock: string = "üíÄ";
const missShotBlock: string = "‚ùå";
const shipSizes = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1];
const numberOfShips = shipSizes.length;
const horizontal: string = "horizontal";
const vertical: string = "vertical";
const player: boolean = true;
const computer: boolean = false;
const technicalCell: string = "technicalCell";
const emptyCell: string = "emptyCell";
const shipCell: string = "shipCell";
const occupiedCell: string = "occupiedCell";
const realOccupiedCell: string = "realOccupiedCell";
const damagedCell: string = "damagedCell";
const deadCell: string = "deadCell";
const fieldRange: [number, number] = [1, 10];
const chooseRange: [number, number] = [1, 2];
const space30 = " ".repeat(30); //—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏
const space68 = " ".repeat(68); //—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏
const yellow: string = "\u001b[33m";
const green: string = "\u001b[32m";
const red: string = "\u001b[31m";
const colEnd: string = "\u001b[0m";
const pirate: string = `${red}–ö–∞–ø–∏—Ç–∞–Ω SKOLZKIY_STAS${colEnd}`
const coins: string[] = [`${yellow}‚õÄ${colEnd}`, `${yellow}‚õÅ${colEnd}`, `${yellow}‚õÉ${colEnd}`, `${yellow}‚õÇ${colEnd}`];
const gameStart: string[] = ["–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3...", "–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2...", "–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1...", `${yellow}–ü–û–ï–•–ê–õ–ò!${colEnd}\n`];
const typingMessage: string[] = [`${pirate} –Ω–∞–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ . `, `${pirate} –Ω–∞–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ . . `, `${pirate} –Ω–∞–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ . . . `];
const pause = (ms: number): Promise<void> => new Promise(res => setTimeout(res, ms));

async function blinkingMessage(message: string[], numberOfTimes: number, delay: number): Promise<void> {//—á–µ—Å—Ç–Ω–æ –Ω–∞—à–µ–ª –≤ –∏–Ω–µ—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥–µ–ª–∞–ª :D
  for (let i = 0; i < numberOfTimes; i++) {
    await pause(delay);
    process.stdout.clearLine(0);
    process.stdout.cursorTo(0);
    process.stdout.write(message[i % message.length] + " ");//–∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º
  }
}

async function userInputNum(//–≤–≤–æ–¥ —á–∏—Å–µ–ª
        range: [number, number],
        inputMessage: string,
        failureMessage: string,
        confirmMessage: string
        ) : Promise<number> {
    while (true) {//–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–∫–∞ –Ω–µ –≤–µ—Ä–Ω–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        let inputNumber = Number(await rl.question(`${inputMessage}\n`));//–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
        if (
            !Number.isInteger(inputNumber) ||
            inputNumber < range[0] ||
            inputNumber > range[1]
            ) {//–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            console.log(`${failureMessage}`);
        } else {
            console.log(confirmMessage);
            return inputNumber;
        }
    }
}

async function userInputStr(
    firstMessage: string,
    warnMessage: string,
    confirmMessage: string,
    lengthOfStr: number
    ): Promise<string> {//–≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    while (true) {//–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–æ–∫–∞ –Ω–µ –≤–µ—Ä–Ω–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        let inputString = await rl.question(`${firstMessage}\n`);
        if (inputString.trim() == "" || inputString.length > lengthOfStr) {//–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π + –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏)
            console.log(`${warnMessage} ${lengthOfStr} —Å–∏–º–≤–æ–ª–æ–≤.`);
        } else {
            console.log(confirmMessage);
            return inputString;
        }
    }
}

interface Cell {
    value: string;
    typeOfCell: string;
}

interface Location {
    row: number;
    col: number;
}

class BattleField {
    sizeOfMap: number;
    battleField: Cell[][];
    possibleMoves: Location[];

    constructor(sizeOfMap: number, isPlayer: boolean) {
        this.sizeOfMap = sizeOfMap;
        this.battleField = this.generateBattleField(isPlayer);
        this.possibleMoves = this.generatePossibleMoves();
    }

    generateBattleField(isPlayer: boolean): Cell[][] { //—Å–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –±–æ—è
        const map = []; // —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤, –∫—É–¥–∞ –±—É–¥–µ–º –ø—É—à–∏—Ç—å –Ω–∞—à—É –∫–∞—Ä—Ç—É
        for (let numberOfRow = 0; numberOfRow < this.sizeOfMap + 1; numberOfRow++) {//+ 1 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ–ª–µ 11—Ö11 (–æ–¥–∏–Ω —Ä—è–¥ –∏ —Å—Ç–æ–ª–±–µ—Ü –ø–æ–¥ –Ω—É–º–µ—Ä–∞—Ü–∏—é)
            const row = [];
            for (let numberOfCol = 0; numberOfCol < this.sizeOfMap + 1; numberOfCol++) {
                //–∑–∞–¥–∞–µ–º –≤–∏–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è, –∑–∞–ø–æ–ª–Ω—è—è —Ä—è–¥ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
                if (numberOfRow === 0 && numberOfCol === 0) {
                    row.push({
                        value: " ",
                        typeOfCell: technicalCell});
                } else if (numberOfRow === 0) {//–Ω—É–º–µ—Ä–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ 0 —Ä–∞–¥—É
                    row.push({
                        value: (" " + numberOfCol.toString()),
                        typeOfCell: technicalCell
                    });
                } else if (numberOfCol === 0) {//–Ω—É–º–µ—Ä–∞—Ü–∏—è —Ä—è–¥–æ–≤ –≤ 0 –∫–æ–ª–æ–Ω–∫–µ
                    row.push({
                        value: (numberOfRow.toString() + (numberOfRow < 10 ? ' ' : '')),
                        typeOfCell: technicalCell
                    });
                } else {//–∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
                    row.push({
                        value: isPlayer ? playerBlock : fogOfWarBlock, // —Ç—É–º–∞–Ω –≤–æ–π–Ω—ã –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
                        typeOfCell: emptyCell
                    });
                }
            }
            map.push(row);//–∑–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É –≥–æ—Ç–æ–≤—ã–º —Ä—è–¥–æ–º (–º–∞—Å—Å–∏–≤–æ–º —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π)
        }
        return map;
    }

    generatePossibleMoves(): Location[] {//—Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤
            const possibleMoves: Location[] = [];
            for (let x = 1; x < this.sizeOfMap + 1; x++) {
                for (let y = 1; y < this.sizeOfMap + 1; y++) {
                    possibleMoves.push({row: x, col: y});//–¥–æ–±–∞–≤–ª—è–µ–º 1, –ø–æ—Ç–æ–º—É —á—Ç–æ 1–π —Ä—è–¥ –∏ —Å—Ç–æ–ª–±–µ—Ü –∑–∞–Ω—è—Ç—ã –ø–æ–¥ –Ω—É–º–µ—Ä–∞—Ü–∏—é
                }
            }
        return possibleMoves;
        }

    displayBattleField(battleField: BattleField): string {
        let battleMap = battleField.battleField.map(row =>
            row.map(cell => cell.value).join(' ')).join('\n');//–ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ä—è–¥—É > –ø–æ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É —Ä—è–¥–∞, —Å–æ–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —á—Ç–æ–± –∫–∞—Ä—Ç–∞ –±—ã–ª–∞ —á—É—Ç—å –±–æ–ª—å—à–µ –≤–∏–∑—É–∞–ª—å–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        return battleMap;
        }

    displayBothBattleFields(nick: string, playerBattleField: BattleField, computerBattleField: BattleField): string {
        let resultMap: string = " ".repeat(12) + green + nick + colEnd + "\n"; //–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –≤—ã–≤–æ–¥–∏–º –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞
        for (let i = 0; i < this.sizeOfMap + 1; i++) {//—Å–æ–µ–¥–∏–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–æ –∫—É—Å–æ—á–∫–∞–º
            let playerRow = playerBattleField.battleField[i].map(cell => cell.value).join(' ');
            let computerRow = computerBattleField.battleField[i].map(cell => cell.value).join(' ');

            resultMap += playerRow + space30 + computerRow + "\n";
        }
        resultMap += space68 + pirate;//–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –≤—ã–≤–æ–¥–∏–º –Ω–∏–∫ –ø–∏—Ä–∞—Ç–∞
        return resultMap;
        }
        
    displayBattleFieldCellInfo(battleField: BattleField): string {//–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–±–æ—Ç—ã
        let battleMap = battleField.battleField.map(row =>
            row.map(cell => cell.typeOfCell).join(' ')).join('\n');
        return battleMap;
        }
    
    surroundings(row: number, col: number): Location[] {//–æ–∫—Ä—É–∂–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ row col (—Å–¥–µ–ª–∞–Ω–æ –∞–±—ã –∫–∞–∫)
        let surroundings = [
            {row: row -1, col: col - 1},
            {row: row -1, col},
            {row: row -1, col: col + 1},

            {row: row, col: col - 1},
            {row: row, col: col + 1},
            
            {row: row + 1, col: col - 1},
            {row: row + 1, col},
            {row: row + 1, col: col + 1},
        ];
        return surroundings.filter(cell => 
            cell.row > 0 && cell.row <= 10 && cell.col > 0 && cell.col <= 10
            );   
    }

    orthogonalSurroundings(row: number, col: number): Location[] {//–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ row col
        let surroundings = [
            {row: row -1, col},
            {row: row +1, col},
            
            {row, col: col - 1},
            {row, col: col + 1},
        ];
        return surroundings.filter(cell => 
            cell.row > 0 && cell.row <= 10 && cell.col > 0 && cell.col <= 10
            );    
    }

    crossSurroundings(row: number, col: number): Location[] {//–æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ row col
        let surroundings = [
            {row: row -1, col: col - 1},
            {row: row -1, col: col + 1},
            
            {row: row + 1, col: col - 1},
            {row: row + 1, col: col + 1},
        ];
        return surroundings.filter(cell => 
            cell.row > 0 && cell.row <= 10 && cell.col > 0 && cell.col <= 10
            );    
    }

    horizontalSurroundings(row: number, col: number): Location[] {//–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ row col
        let surroundings = [
            {row, col: col - 1},
            {row, col: col + 1},
        ];
        return surroundings.filter(cell => 
            cell.row > 0 && cell.row <= 10 && cell.col > 0 && cell.col <= 10
            );    
    }

    verticalSurroundings(row: number, col: number): Location[] {//–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ row col
        let surroundings = [
            {row: row -1, col},
            {row: row +1, col},
        ];
        return surroundings.filter(cell => 
            cell.row > 0 && cell.row <= 10 && cell.col > 0 && cell.col <= 10
            );    
    }
}

class ShipManagement {
    battleField: BattleField;

    constructor(battleField: BattleField) {
        this.battleField = battleField;
    }

    checkSpaceForTheShip(
        battleField: Cell[][],
        size: number,
        orientation: string,
        ): Location[] {
        //–ø–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω–æ–µ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –∏–ª–∏ —Å —É–∂–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º–∏ –Ω–∞ –Ω–µ–º –∫–æ—Ä–∞–±–ª—è–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        let positions: Location[] = [];
        let inspector = "s".repeat(size); //—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ä–∞–∑–º–µ—Ä–æ–º —Å –∫–æ—Ä–∞–±–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–æ–ª–µ

        //row —ç—Ç–æ –±—É–¥–µ—Ç –ø–æ–¥–º–∞—Å—Å–∏–≤(–Ω–æ–º–µ—Ä —Ä—è–¥–∞), –∞ col –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞(–Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞) –≤ –ø–æ–¥–º–∞—Å—Å–∏–≤–µ
        if (orientation === horizontal) {//–Ω–∞—Ö–æ–¥–∏–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            for (let row = 0; row < battleField.length; row++) {
                let rowString = battleField[row]
                    .map(col => col.typeOfCell === emptyCell ? "s" : "x")
                    .join(""); //–¥–µ–ª–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ä—è–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –≤ —è—á–µ–π–∫–µ –∫–æ—Ä–∞–±–ª—å –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É "s", –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è - "x"

                for (let col = 1; col <= rowString.length; col++) { // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä—è–¥ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞, —Ç.–∫ –∫–æ—Ä–∞–±–ª—å –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –Ω–µ –≤–µ–∑–¥–µ –∏ —Å 1 –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º —Ç–µ—Ö–¥–∞–Ω–Ω—ã–µ
                    let matchingString = rowString.substring(col, col + inspector.length); //–≤—ã—Ä–µ–∑–∞–µ–º –Ω—É–∂–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    if (matchingString === inspector) {
                        positions.push({row: row, col: col});//–µ—Å–ª–∏ –≤ –Ω–∞—à–µ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∞—è –∫–æ—Ä–∞–±–ª—å - –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∫–æ—Ä–∞–±–ª—è
                    }
                }
            }
        } else {//–Ω–∞—Ö–æ–¥–∏–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            for (let col = 0; col < battleField.length; col++) {
                let colString = battleField
                    .map(row => row[col].typeOfCell === emptyCell ? "s" : "x")
                    .join("");//–¥–µ–ª–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    
                for (let row = 0; row < battleField.length; row++) {
                    let matchingString = colString.substring(row, row + inspector.length);
                    if (matchingString === inspector) {
                        positions.push({row: row, col: col});
                    }
                }
            }  
        }
        return positions;//–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    }

    addShip(
        battleField: Cell[][],
        row: number,
        col: number,
        size: number,
        orientation: string,
        isPlayer: boolean
        ): boolean {

        if (orientation === horizontal) {//—Ä–∞–∑–º–µ—â–∞–µ–º –∫–æ—Ä–∞–±–ª—å –Ω–∞ —Å—Ö–µ–º–µ + –∑–∞–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
            for (let i = 0; i < size; i++) {
                battleField[row][col + i].value = isPlayer ? shipBlock : fogOfWarBlock;//–Ω–µ –≤–∏–¥–∏–º –∫–æ—Ä–∞–±–ª–∏ –Ω–∞ —á—É–∂–æ–º –ø–æ–ª–µ
                battleField[row][col + i].typeOfCell = shipCell; //–ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º —Ç–∏–ø ship –¥–ª—è —è—á–µ–π–∫–∏
                this.battleField.surroundings(row, col + i).forEach(({row, col}) => {
                    if (row >= 0 && row < battleField.length && col >= 0 && col < battleField[row].length) {//–ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –ª–∏ –∏–Ω–¥–µ–∫—Å—ã –∑–∞ —Ä–∞–º–∫–∏
                        if (battleField[row][col].typeOfCell === emptyCell) {
                            battleField[row][col].value = isPlayer ? occupiedBlock : battleField[row][col].value;
                            battleField[row][col].typeOfCell = occupiedCell;//–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
                        }
                    }
                });
            }
        } else if (orientation === vertical) {
            for (let i = 0; i < size; i++) {
                battleField[row + i][col].value = isPlayer ? shipBlock : fogOfWarBlock;
                battleField[row + i][col].typeOfCell = shipCell;
                this.battleField.surroundings(row + i, col).forEach(({row, col}) => {
                    if (row >= 0 && row < battleField.length && col >= 0 && col < battleField[row].length) {
                        if (battleField[row][col].typeOfCell === emptyCell) {
                            battleField[row][col].value = isPlayer ? occupiedBlock : battleField[row][col].value;
                            battleField[row][col].typeOfCell = occupiedCell;//–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
                        }
                    }
                });
            }
        }
        return true;
    }
    
    randomShipPlacement(
        battleField: BattleField,
        isPlayer: boolean) {//–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª—É—á–∞–π–Ω–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π

        for (let placedShips = 0; placedShips < numberOfShips; placedShips++) {//—Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º numberOfShips –∫–æ—Ä–∞–±–ª–µ–π –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Ü–∏–∫–ª–æ–º
            let orientation = Math.random() < 0.5 ? vertical : horizontal;
            let shipSize = shipSizes[placedShips];//–ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –º–∞—Å—Å–∏–≤—É –∫–æ—Ä–∞–±–ª–µ–π –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á–µ–º—É —Å–µ–π—á–∞—Å —Ä–∞–≤–µ–Ω placedShips(–Ω–æ–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ))
            let possibleCells = this.checkSpaceForTheShip(battleField.battleField, shipSize, orientation);//–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–¥–∞ —Ç–∫–Ω—É—Ç—å –∫–æ—Ä–∞–±–ª—å
            let randomCell = possibleCells[Math.floor(Math.random() * possibleCells.length)];//–≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ

            if (isPlayer) {//–¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–∞–±–ª—å –∫—É–¥–∞ –Ω–∞–¥–æ
                this.addShip(battleField.battleField, randomCell.row, randomCell.col, shipSize, orientation, player);
            } else {
                this.addShip(battleField.battleField, randomCell.row, randomCell.col, shipSize, orientation, computer);
            }
        }
    }

    inputShipPlacement(battleField: BattleField, row: number, col: number, size: number, orientation: string) : boolean {//—Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π –≤—Ä—É—á–Ω—É—é –¥–ª—è –∏–≥—Ä–æ–∫–∞
        let possibleCells = this.checkSpaceForTheShip(battleField.battleField, size, orientation);
        //—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç–∞—Ö –µ—â–µ –Ω–µ –∑–Ω–∞—á–∞—Ç, —á—Ç–æ –æ–Ω–∏ —Ä–∞–≤–Ω—ã
        let check = possibleCells.find(rowCol => rowCol.row === row && rowCol.col === col);
        if (check === undefined) {//–µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏ - –≤–µ—Ä–Ω–µ—Ç false, !false 
            return false;

        } else {
            this.addShip(battleField.battleField, row, col, size, orientation, player);
            console.log(`–ö–æ—Ä–∞–±–ª—å —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ –ø–æ–ª–µ, —Ç–µ–ø–µ—Ä—å —Ç–≤–æ—è –∫–∞—Ä—Ç–∞ –≤—ã–≥–ª—è–¥–∏—Ç –≤–æ—Ç —Ç–∞–∫:\n`);
            console.log(battleField.displayBattleField(battleField));
            return true;
        }
    }
}

class Battle {
    playerBoard: BattleField;
    computerBoard: BattleField;

    constructor(playerBoard: BattleField, computerBoard: BattleField) {
        this.playerBoard = playerBoard;
        this.computerBoard = computerBoard;
    }

    async playerFire() : Promise<boolean> {
        let success: boolean = false;
        let possibleMoves = this.playerBoard.possibleMoves;//–≤—ã–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞
        let col = await userInputNum(fieldRange, `–¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≤—ã—Å—Ç—Ä–µ–ª.\n–í—ã–±–∏—Ä–∞–π —Å—Ç–æ–ª–±–µ—Ü, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º —Å—Ç—Ä–µ–ª—è—Ç—å:`,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã—Å—Ç—Ä–µ–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç", "");
        let row = await userInputNum(fieldRange, `–¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≤—ã—Å—Ç—Ä–µ–ª.\n–í—ã–±–∏—Ä–∞–π —Å—Ç—Ä–æ–∫—É, –∫—É–¥–∞ –±—É–¥–µ–º —Å—Ç—Ä–µ–ª—è—Ç—å:`,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã—Å—Ç—Ä–µ–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç", "–°—Ç—Ä–µ–ª—è–µ–º:");
        await pause(1000);
        if (!possibleMoves.find(coordinates => coordinates.row === row && coordinates.col === col)) {
            console.log("–≠—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞, –≤—ã–±–µ—Ä–∏ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å–∫–∏.")
            await this.playerFire(); //–µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - —Ö–æ–¥ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É, –∞ –º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å—Ç—Ä–µ–ª—å–Ω—É—Ç—å —Å–Ω–æ–≤–∞
        } else {
            success = this.takesDamage(row, col, computer);
            this.playerBoard.possibleMoves = possibleMoves.filter(coordinates => !(coordinates.row === row && coordinates.col === col));
        }
        return success;
    }

    computerFire() : boolean {
        let possibleMoves: Location[] = [];
        let damagedCells: Location[] = [];

        //–ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–µ–ª—å–±—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (–¥–æ–±–∏–≤–∞–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π)
        for (let row = 1; row < this.playerBoard.battleField.length; row++) {
            for (let col = 1; col < this.playerBoard.battleField.length; col++) {
                if (this.playerBoard.battleField[row][col].typeOfCell === damagedCell) {//—Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
                    damagedCells.push({row, col});
                }
            }
        }

        if (damagedCells.length === 1) {
            //–µ—Å–ª–∏ –≤—Å–µ–≥–æ –æ–¥–Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞ - –º—ã –Ω–µ–∑–Ω–∞–µ–º –≤ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –∫–æ—Ä–∞–±–ª—å –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å—Ç—Ä–µ–ª—è—Ç—å –Ω–∞–∫—Ä–µ—Å—Ç
            possibleMoves = this.playerBoard.orthogonalSurroundings(damagedCells[0].row, damagedCells[0].col).filter(cell => 
                this.playerBoard.battleField[cell.row][cell.col].value !== missShotBlock &&
                this.playerBoard.battleField[cell.row][cell.col].typeOfCell !== occupiedCell);//–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∫–ª–µ—Ç–∫–∏, –∫—É–¥–∞ —É–∂–µ –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤—ã—Å—Ç—Ä–µ–ª
            }

        if (damagedCells.length > 1) {
            //–∫–æ–≥–¥–∞ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫, —Ç–æ –º—ã —É–∂–µ –∑–Ω–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è
            //–µ—Å–ª–∏ –º—ã –ø–æ–ø–∞–ª–∏ –ø–æ –∫–æ—Ä–∞–±–ª—é —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑ - –º—ã –Ω–µ —Å–º–æ–∂–µ–º —Å—Ç—Ä–µ–ª—è—Ç—å –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–∫–∞ –Ω–µ —É–±—å–µ–º –µ–≥–æ
            //–ø–æ—ç—Ç–æ–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ–≥–æ –¥–≤–µ –ø–µ—Ä–≤—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏, –æ—Å—Ç–∞–ª—å–Ω—ã–µ–±—É–¥—É—Ç –Ω–∞ —Ç–æ–º –∂–µ —Ä—è–¥—É –∏–ª–∏ —Å—Ç–æ–ª–±—Ü–µ
            if (damagedCells[0].row === damagedCells[1].row) {//–≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
                //–µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
                for (let i = 0; i < damagedCells.length; i++) {
                    let row = damagedCells[i].row;
                    let col = damagedCells[i].col;
                    //–¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
                    let movesForCell = this.playerBoard.horizontalSurroundings(row, col).filter(cell => //–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∫–ª–µ—Ç–∫–∏ –∫—É–¥–∞ —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ (–ø—Ä–æ–º–∞—Ö –∏ –ø–æ–ø–∞–¥–∞–Ω–∏–µ)
                        this.playerBoard.battleField[cell.row][cell.col].value !== missShotBlock &&
                        this.playerBoard.battleField[cell.row][cell.col].value !== damagedBlock &&
                        this.playerBoard.battleField[cell.row][cell.col].typeOfCell !== occupiedCell
                    );
                    //–¥–æ–±–∞–≤–ª—è–µ–º –≤ possiblemoves
                    for (let moves = 0; moves < movesForCell.length; moves++) {
                        possibleMoves.push(movesForCell[moves]);
                    }
                }
            } else {
                //–µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
                for (let i = 0; i < damagedCells.length; i++) {
                    let row = damagedCells[i].row;
                    let col = damagedCells[i].col;
                    //–¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã
                    let movesForCell = this.playerBoard.verticalSurroundings(row, col).filter(cell => //–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∫–ª–µ—Ç–∫–∏ –∫—É–¥–∞ —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ (–ø—Ä–æ–º–∞—Ö –∏ –ø–æ–ø–∞–¥–∞–Ω–∏–µ)
                        this.playerBoard.battleField[cell.row][cell.col].value !== missShotBlock &&
                        this.playerBoard.battleField[cell.row][cell.col].value !== damagedBlock &&
                        this.playerBoard.battleField[cell.row][cell.col].typeOfCell !== occupiedCell
                    );
                    //–¥–æ–±–∞–≤–ª—è–µ–º –≤ possiblemoves
                    for (let moves = 0; moves < movesForCell.length; moves++) {
                        possibleMoves.push(movesForCell[moves]);
                    }
                }
            }
        }

        if (possibleMoves.length === 0) {//–∫–æ–≥–¥–∞ —É –Ω–∞—Å –Ω–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫, –ø—Ä–∏—Ö–æ–¥–∏–º —Å—é–¥–∞ —Å 0 –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–ª–µ—Ç–∫—É –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ö–æ–¥–æ–≤
            possibleMoves = this.computerBoard.possibleMoves;
        }
            
        let randomCroodinates = possibleMoves[Math.floor(Math.random() * possibleMoves.length)]; //floor –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã
        
        //—É–±–∏—Ä–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—Å—Ç—Ä–µ–ª–∞ –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º
        this.computerBoard.possibleMoves = this.computerBoard.possibleMoves.filter(coordinates => !(coordinates.row === randomCroodinates.row && coordinates.col === randomCroodinates.col));
        //–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–¥–∞–º–∞–∂–∏–ª–∞—Å—å –ª–∏ –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞ –∏–ª–∏ –∫–æ—Ä–∞–±–ª—å
        let success = this.takesDamage(randomCroodinates.row, randomCroodinates.col, player);

        if (success) {//–µ—Å–ª–∏ –ø–æ–ø–∞–ª–∏
            this.playerBoard.crossSurroundings(randomCroodinates.row, randomCroodinates.col).forEach(cell => {
                this.playerBoard.battleField[cell.row][cell.col].typeOfCell = occupiedCell;
                });//—É–±–∏—Ä–∞–µ–º –∫–ª–µ—Ç–∫–∏ –Ω–∞–∫—Ä–µ—Å—Ç –æ—Ç –º–µ—Å—Ç–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤ - —Ç–∞–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–∞–±–ª—è
            this.playerBoard.battleField[randomCroodinates.row][randomCroodinates.col].value = damagedBlock;//–∏–∑–º–µ–Ω—è–µ–º –∫–ª–µ—Ç–∫—É –Ω–∞ –ø–æ–¥–±–∏—Ç—É—é
            this.playerBoard.battleField[randomCroodinates.row][randomCroodinates.col].typeOfCell = damagedCell;
            //–ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–µ—Ä—Ç–≤ –ª–∏ –∫–æ—Ä–∞–±–ª—å
            let dead = this.isDead(randomCroodinates.row, randomCroodinates.col, this.playerBoard);
            if (dead) {
                // –µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –º–µ—Ä—Ç–≤, –±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥ –≤—Å–µ–≥–æ –∫–æ—Ä–∞–±–ª—è
                let ship = this.checkShip(randomCroodinates.row, randomCroodinates.col, this.playerBoard);
                for (let cell of ship) {
                    this.playerBoard.battleField[cell.row][cell.col].value = deadShipBlock;//–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    this.playerBoard.battleField[cell.row][cell.col].typeOfCell = deadCell;//–æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
                    this.playerBoard.surroundings(cell.row, cell.col).forEach(location => {
                        let surroundingCell = this.playerBoard.battleField[location.row][location.col];
                        if (surroundingCell.value !== damagedBlock &&
                            surroundingCell.value !== deadShipBlock && 
                            surroundingCell.value !== missShotBlock) {//–æ–±–Ω–æ–≤–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è (–¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–∞–º –∫–æ—Ä–∞–±–ª—å), –ø—Ä–æ–º–∞—Ö–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            surroundingCell.value = occupiedBlock;
                            surroundingCell.typeOfCell = realOccupiedCell;
                        }
                    });
                }
            }
            this.computerBoard.possibleMoves = this.computerBoard.possibleMoves.filter(coordinates => 
                this.playerBoard.battleField[coordinates.row][coordinates.col].typeOfCell !== realOccupiedCell //–∏—Å–∫–ª—é—á–∞–µ–º –∫–ª–µ—Ç–∫–∏ —Å —Ç–∏–ø–æ–º realOccupiedCell
            );

            return true;
        } else {
            this.playerBoard.battleField[randomCroodinates.row][randomCroodinates.col].value = missShotBlock; // –º–µ—Ç–∏–º –∫–ª–µ—Ç–∫—É –∫–∞–∫ –ø—Ä–æ–º–∞—Ö
            this.playerBoard.battleField[randomCroodinates.row][randomCroodinates.col].typeOfCell = occupiedCell;
        }
        return false;
    }
  
    takesDamage(row: number, col: number, isPlayer: boolean) : boolean {//–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª
        let board = isPlayer ? this.playerBoard : this.computerBoard;
        if (board.battleField[row][col].typeOfCell === shipCell) {//–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –ø–æ –∫–æ—Ä–∞–±–ª—é
            console.log("–ü–æ–ø–∞–ª –ø–æ –∫–æ—Ä–∞–±–ª—é.");
            board.battleField[row][col].value = damagedBlock;
            board.battleField[row][col].typeOfCell = damagedCell;
            let dead = this.isDead(row,col, this.computerBoard);
            if (dead) {//–µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –º–µ—Ä—Ç–≤
                console.log("–£–ë–ò–õ!!!")
                let ship = this.checkShip(row,col, this.computerBoard);//—Å–æ–±–∏—Ä–∞–µ–º –µ–≥–æ –ø–æ—á–∞—Å—Ç—è–º
                for (let cell of ship) {
                    board.battleField[cell.row][cell.col].value = deadShipBlock;//–∫–æ—Ä–∞–±–ª—å –ø–æ–≥–∏–±, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    board.surroundings(cell.row, cell.col).forEach(location => {//—É–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥ –º–µ—Ä—Ç–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
                        let surroundingCell = board.battleField[location.row][location.col];
                        if (surroundingCell.value !== damagedBlock &&
                            surroundingCell.value !== deadShipBlock && //–æ—Å—Ç–∞–≤–ª—è–µ–º —á–µ—Ä–µ–ø—É—à–∫—É
                            surroundingCell.value !== missShotBlock) {//–µ—Å–ª–∏ –≤ –∫–ª–µ—Ç–∫—É —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º value –≤—ã—Å—Ç—Ä–µ–ª–∞
                                surroundingCell.value = occupiedBlock;
                                surroundingCell.typeOfCell = occupiedCell;
                        }
                    });
                }
            } else {
                console.log("–†–ê–ù–ò–õ!!!")
            }
            return true;
        } else {
            console.log("–ü–†–û–ú–ê–•!!!");//todo
            board.battleField[row][col].value = missShotBlock;
            board.battleField[row][col].typeOfCell = occupiedCell;
        }
        return false;
    }

    checkShip(row: number, col: number, battleField: BattleField, shipArr: Location[] = []): Location[] {
        let surroundingCells = battleField.orthogonalSurroundings(row, col);
        if (!shipArr.some(cell => cell.row === row && cell.col === col)) {//–µ—Å–ª–∏ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–∏ –µ—â–µ –Ω–µ—Ç –≤ –∫–æ—Ä–∞–±–ª–µ - –¥–æ–±–∞–≤–ª—è–µ–º
            shipArr.push({row, col});
        }

        for (let i = 0; i < surroundingCells.length; i++) {//–ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–ª–µ—Ç–∫–∞–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
            let r = surroundingCells[i].row;
            let c = surroundingCells[i].col;
            let cell = battleField.battleField[r][c]; 
    
            if (cell.typeOfCell === 'shipCell' || cell.typeOfCell === 'damagedCell') {//–µ—Å–ª–∏ –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–∫–∞—Ö –µ—Å—Ç—å —á–∞—Å—Ç—å –∫–æ—Ä–∞–±–ª—è - –¥–æ–±–∞–≤–ª—è–µ–º
                if (!shipArr.some(cell => cell.row === r && cell.col === c)) {//–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∞–±–ª—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–º –∫–ª–µ—Ç–∫–∏ —á—Ç–æ–±—ã –Ω–µ —Ö–æ–¥–∏—Ç—å —Ç—É–¥–∞-—Å—é–¥–∞ –∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
                    shipArr.push({row: r, col: c});  //–¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–µ—Ç–∫—É –≤ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –µ–µ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
                    this.checkShip(r, c, battleField, shipArr);//—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
                }
            }
        }
        return shipArr;//–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–∞–±–ª—å(–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
    }

    isDead(row: number, col: number, battleField: BattleField): boolean {
        let shipArr = this.checkShip(row, col, battleField);//—Å–æ–±–∏—Ä–∞–µ–º –∫–æ—Ä–∞–±–ª—å, –∫–ª–µ—Ç–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–Ω–µ–Ω–∞
        for (let cell of shipArr) {//–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏
            if (battleField.battleField[cell.row][cell.col].typeOfCell !== damagedCell) {
                return false; //–∫–æ—Ä–∞–±–ª—å –∂–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∂–∏–≤–∞—è –∫–ª–µ—Ç–∫–∞
            }
        }
        return true; //–µ—Å–ª–∏ –≤—Å–µ –Ω–∞–¥–∞–º–∞–∂–µ–Ω—ã - –º–µ—Ä—Ç–≤
    }

    checkAlive(battleField: BattleField) : number {
        let aliveShips = 0;
        for (let row of battleField.battleField) {//–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É
            for (let cell of row) {//–ø—Ä–æ–≤–µ—Ä–µ—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∂–∏–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
                if (cell.typeOfCell === shipCell) {//—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö –∫–ª–µ—Ç–æ–∫
                    aliveShips++;
                }
            }
        }
        return aliveShips;//–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤—Å–µ –º–µ—Ä—Ç–≤—ã
    }

    isWinner() {
        const playerShips = this.checkAlive(this.playerBoard);
        const computerShips = this.checkAlive(this.computerBoard);
        //–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∂–∏–≤—ã–µ        
        if (playerShips === 0) {
            console.log(`–í —ç—Ç–æ—Ç —Ä–∞–∑ –ø–æ–±–µ–¥—É –æ–¥–µ—Ä–∂–∞–ª ${pirate}, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —Ç–µ–±–µ –ø–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑. –ò–ª–∏ –Ω–µ –ø–æ–≤–µ–∑–µ—Ç.`);
            rl.close;
            return "computerWin";//–º—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏
        }
        
        if (computerShips === 0) {
            console.log(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –±–∏–ª—Å—è –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ—Ä—Å–∫–æ–π –≤–æ–ª–∫ –∏ –æ–¥–µ—Ä–∂–∞–ª –ø–æ–±–µ–¥—É, ${pirate} —É–Ω–∏–∂–µ–Ω–Ω–æ —Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è.`);
            rl.close;
            return "playerWin";//–º—ã –ø–æ–±–µ–¥–∏–ª–∏
        }
        return "";//–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    }
}

const playerBattleField = new BattleField(mapSize, player);//—Å–æ–∑–¥–∞–µ–º –¥–≤–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ BattleField, –æ–¥–∏–Ω –¥–ª—è –∏–≥—Ä–æ–∫–∞, –≤—Ç–æ—Ä–æ–π –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
const computerBattleField = new BattleField(mapSize, computer);
playerBattleField.generatePossibleMoves();
computerBattleField.generatePossibleMoves();

const playerShipManager = new ShipManagement(playerBattleField);//—Å–æ–∑–¥–∞–µ–º –¥–≤–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ ShipManagement –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–º –∏—Ä–æ–∫–∞ –∏ –ø–æ–ª–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
const computerShipManager = new ShipManagement(computerBattleField);

computerShipManager.randomShipPlacement(computerBattleField, computer);//–∫–æ–º–ø –≤—Å–µ–≥–¥–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π

const battle = new Battle(playerBattleField, computerBattleField);

async function sayNickname() {
    console.log(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É ${yellow}–º–æ—Ä—Å–∫–æ–π –±–æ–π${colEnd}!`);
    await pause(1000);
    let nick = await userInputStr(`–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫:`, "–í —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞ –∏ –æ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ", `–ú—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —Å —Ç–µ–º, –∫–∞–∫ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.`, 25);
    await pause(1000);
    console.log(`–†–∞–∑–º–µ—Å—Ç–∏–º –∫–æ—Ä–∞–±–ª–∏ –Ω–∞ —Ç–≤–æ–µ–º –ø–æ–ª–µ, –Ω–æ –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω, –æ–ø–ø–æ–Ω–µ–Ω—Ç ${pirate} - –º–∞—Ç–µ—Ä—ã–π –ø–∏—Ä–∞—Ç, –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –±–æ—é.`);
    return nick;    
}

async function placeShips(nick: string) {//—Ä–∞–∑–º–µ—â–∞–µ–º –∫–æ—Ä–∞–±–ª–∏
    let shipPlacementAnswer = await userInputNum(
        chooseRange,
        `–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
        –Ø –º–æ–≥—É —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∞–±–ª–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∑–∞ —Ç–µ–±—è - [1],
        –∏–ª–∏ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–∞–º, –≤–≤–æ–¥—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - [2],
        –≤—ã–±–∏—Ä–∞–π, ${yellow}[1]${colEnd} –∏–ª–∏ ${yellow}[2]${colEnd}?`,
         "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, [1] - —è –∑–∞–ø–æ–ª–Ω—è—é –∑–∞ —Ç–µ–±—è, [2] - —Ç—ã –∑–∞–ø–æ–ª–Ω—è–µ—à—å —Å–∞–º",
         `–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä.`);

         //–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
    if (shipPlacementAnswer === 1) {
        playerShipManager.randomShipPlacement(playerBattleField, player);
        console.log(playerBattleField.displayBattleField(playerBattleField));
        //—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
    } else {
        let placedShips = 0
        console.log("–ù–∞ —Ç–≤–æ–µ–º –ø–æ–ª–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è.");
        console.log(playerBattleField.displayBattleField(playerBattleField));
        while (placedShips < numberOfShips) {
            let size = shipSizes[placedShips]
            console.log(`–°–µ–π—á–∞—Å –º—ã –±—É–¥–µ–º —Ä–∞–∑–º–µ—â–∞—Ç—å ${size}-–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å, –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å ${10 - placedShips} –∫–æ—Ä–∞–±–ª–µ–π.`)
            let col = await userInputNum([1, 10], `–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É ${yellow}—Å—Ç–æ–ª–±—Ü–∞${colEnd}, –∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª—å:`,
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –≤–≤–µ–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É, –∫–æ—Ç–æ—Ä—É—é —è –Ω–µ –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10",
                "–¢—ã —Å–¥–µ–ª–∞–ª —Å–≤–æ–π –≤—ã–±–æ—Ä.");
            let row = await userInputNum([1, 10], `–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É ${yellow}—Å—Ç—Ä–æ–∫–∏${colEnd}, –∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª—å:`,
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –≤–≤–µ–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É, –∫–æ—Ç–æ—Ä—É—é —è –Ω–µ –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10",
                "–¢—ã —Å–¥–µ–ª–∞–ª —Å–≤–æ–π –≤—ã–±–æ—Ä.");
            let orientation = horizontal;
            if (size !== 1) {//—Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —É –≤—Å–µ—Ö –∫—Ä–æ–º–µ –æ–¥–Ω–æ–ø–∞–ª—É–±–Ω—ã—Ö
                let orientationInput = await userInputNum(chooseRange, `–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏—Å—å –∫–∞–∫ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è —Ç–≤–æ–π –∫–æ—Ä–∞–±–ª—å,
                    –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ - [1],
                    –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ - [2],
                    ${yellow}[1]${colEnd} –∏–ª–∏ ${yellow}[2]${colEnd}?`,
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, [1] - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ, [2] - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ.",
                    "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.");
                orientation = orientationInput === 1 ? horizontal : vertical;
            }
            let placed = playerShipManager.inputShipPlacement(playerBattleField, row, col, size, orientation);
            if (placed) {
                placedShips++;//—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å —Ä–∞–∑–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ
            } else {
                console.log(playerBattleField.displayBattleField(playerBattleField));
                console.log(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, ${size}-–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö.
                    –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –ø–æ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–ª–µ –∏ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏.`);//–≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            };
        }
    }
    console.log(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, ${green}${nick}${colEnd}, —Ç–≤–æ–µ –ø–æ–ª–µ –±–æ—è –≥–æ—Ç–æ–≤–æ, –º—ã –º–æ–∂–µ–º –ø—Ä–æ–ª–æ–ª–∂–∞—Ç—å!`);
}

async function firstMove(nick: string) {//–≤—ã–±–∏—Ä–∞–µ–º –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–π
    console.log(`–°–µ–π—á–∞—Å —è –±—Ä–æ—à—É –º–æ–Ω–µ—Ç–∫—É –∏ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è –∫—Ç–æ —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º`)
    await blinkingMessage(coins, 24, 100);
    await pause(1000);
    let random = Math.random() > 0.5 ? true : false;
    if (random) {
        console.log(`\n–í —ç—Ç–æ—Ç —Ä–∞–∑ ${green}${nick}${colEnd} –ø–æ–≤–µ–∑–ª–æ, –ø—Ä–∞–≤–æ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞ –∑–∞ —Ç–æ–±–æ–π.
            –ñ–µ–ª–∞—é —É–¥–∞—á–∏, ${red}–±–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!!!${colEnd}`);
    } else {
        console.log(`\n–í —ç—Ç–æ—Ç —Ä–∞–∑ —É–¥–∞—á–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∞—Å—å –ª–∏—Ü–æ–º –∫ ${pirate}, ${red}–±–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!!!${colEnd}`)
    }
    return random;
}

async function playerShot(nick: string) : Promise<boolean> {
    console.log(`–•–æ–¥ ${green}${nick}${colEnd}:`);
    let success = await battle.playerFire();
    console.log(playerBattleField.displayBothBattleFields(nick, playerBattleField, computerBattleField));
    //–µ—Å–ª–∏ –ø–æ–ø–∞–ª–∏ - —Ö–æ–¥–∏–º –µ—â–µ —Ä–∞–∑
    return success;        

}

function computerShot(nick: string) {
    console.log(`–•–æ–¥ ${pirate}:`);
    let success = battle.computerFire(); 
    console.log(playerBattleField.displayBothBattleFields(nick, playerBattleField, computerBattleField));
    return success;
}

async function fiveAlive() {
    await blinkingMessage(typingMessage, 8, 800);
    console.log(`\n–£ –¢–ï–ë–Ø –í–°–ï –ù–û–†–ú–ê–õ–¨–ù–û???? –ú–• –û–§–§ –ó–ê–ï–ë–ê–õ!!!!!!`);
}

async function oneAlive() {
    await blinkingMessage(typingMessage, 8, 800);
    console.log(`\nZAEBAL VIRUBAI CHITI NORMALNO IGRAT MOJESH??????`);
}

async function startGame() {
    let winner = "";
    let nick = await sayNickname();
    await placeShips(nick);
    await pause(1000);
    let first = await firstMove(nick);    
    await blinkingMessage(gameStart, 4, 1000);

    let fiveAliveMessage = false, oneAliveMessage = false;// –∑–∞–¥–∞–µ–º false —á—Ç–æ–±—ã —Ñ-—è –≤—ã–∑—ã–≤–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

    if (first) {//–µ—Å–ª–∏ –º—ã —Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ
        let anotherShot = true; //—Å—Ç—Ä–µ–ª—è–µ–º –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–º–∞–∂–µ–º
        while (anotherShot) {
            let aliveShips = battle.checkAlive(computerBattleField);
            anotherShot = await playerShot(nick);//true, –µ—Å–ª–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
            winner = battle.isWinner();
            if (aliveShips === 5 && !fiveAliveMessage) {
                await fiveAlive();
                fiveAliveMessage = true;//—É–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤
            }
        if (aliveShips === 1 && !oneAliveMessage) {
                await oneAlive();
                oneAliveMessage = true;
            }
            if (winner) return//–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
        }
    } 

    while (!winner) {//–ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è(–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è)
        let anotherShotComp = true;
        while (anotherShotComp) {
            await pause(1000);
            anotherShotComp = computerShot(nick);//true, –µ—Å–ª–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
            winner = battle.isWinner();
            if (winner) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
        }

        let anotherShot = true;//—Å—Ç—Ä–µ–ª—è–µ–º –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–º–∞–∂–µ–º
        while (anotherShot) {
            await pause(1000);
            let aliveShips = battle.checkAlive(computerBattleField);
            anotherShot = await playerShot(nick);//true, –µ—Å–ª–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
            winner = battle.isWinner();

            if (aliveShips === 5 && !fiveAliveMessage) {
                await fiveAlive();
                fiveAliveMessage = true;
            }
        if (aliveShips === 1 && !oneAliveMessage) {
                await oneAlive();
                oneAliveMessage = true;
            }
            if (winner) return;//–ø–ø–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
            }
    }
}

startGame();